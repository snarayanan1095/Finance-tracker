import firebase from 'firebase';

/*
========================================
 FIRESTORE DATA SCHEMA (DOCUMENTATION)
========================================

Collection: users
-----------------
- id: string (user UID, also used as document ID)
- name: string
- email: string
- isAdmin: boolean
- familyId: string (ID of the family the user belongs to)
- currency: Currency (object with code, name, symbol)
- createdAt: Timestamp
- updatedAt: Timestamp

Collection: families
--------------------
- id: string (auto-generated by Firestore)
- name: string
- ownerId: string (user UID of the family owner)
- memberIds: string[] (array of user UIDs)
- defaultCurrency: Currency (object with code, name, symbol)
- createdAt: Timestamp
- updatedAt: Timestamp

Collection: expenses
--------------------
- id: string (auto-generated by Firestore)
- familyId: string (ID of the family this expense belongs to)
- userId: string (ID of the user who created the expense)
- amount: number
- description: string
- category: string
- date: Timestamp
- createdAt: Timestamp
- updatedAt: Timestamp

// See the interfaces below for more details and type safety in the app.
*/

// Define core types for the application

export enum ExpenseCategory {
  FOOD = 'Food',
  HOUSING = 'Housing',
  TRANSPORTATION = 'Transportation',
  ENTERTAINMENT = 'Entertainment',
  UTILITIES = 'Utilities',
  HEALTHCARE = 'Healthcare',
  EDUCATION = 'Education',
  SHOPPING = 'Shopping',
  TRAVEL = 'Travel',
  PERSONAL = 'Personal',
  MISCELLANEOUS = 'Miscellaneous'
}

export interface Currency {
  code: string;
  symbol: string;
  name: string;
}

// Firestore document types
export interface FirestoreExpense {
  id?: string;
  title: string;
  amount: number;
  location: string;
  date: firebase.firestore.Timestamp;
  category: ExpenseCategory;
  notes?: string;
  userId: string;
  familyId: string;
  createdAt: firebase.firestore.Timestamp;
  updatedAt: firebase.firestore.Timestamp;
}

export interface FirestoreUser {
  id: string;
  name: string;
  email: string;
  avatar?: string;
  isAdmin: boolean;
  familyId: string;
  currency: Currency;
  createdAt: firebase.firestore.Timestamp;
  updatedAt: firebase.firestore.Timestamp;
}

export interface FirestoreFamily {
  id: string;
  familyId: string;
  name: string;
  createdAt: firebase.firestore.Timestamp;
  updatedAt: firebase.firestore.Timestamp;
  ownerId: string;
  memberIds: string[];
  defaultCurrency: Currency;
  joinCode: string;
}

// Application state types (after conversion from Firestore)
export interface Expense extends Omit<FirestoreExpense, 'date' | 'createdAt' | 'updatedAt'> {
  date: string;
  createdAt: string;
  updatedAt: string;
}

export interface User extends Omit<FirestoreUser, 'createdAt' | 'updatedAt'> {
  createdAt: string;
  updatedAt: string;
}

export interface Family extends Omit<FirestoreFamily, 'createdAt' | 'updatedAt' | 'memberIds'> {
  createdAt: string;
  updatedAt: string;
  members: User[];
  familyId: string;
  joinCode: string;
}

export interface AppState {
  currentUser: User | null;
  currentFamily: Family | null;
  expenses: Expense[];
  families: Family[];
  users: User[];
  loading: boolean;
}

export type ActionType = 
  | { type: 'SET_EXPENSES'; payload: Expense[] }
  | { type: 'ADD_EXPENSE'; payload: Expense }
  | { type: 'EDIT_EXPENSE'; payload: Expense }
  | { type: 'DELETE_EXPENSE'; payload: string }
  | { type: 'SET_USERS'; payload: User[] }
  | { type: 'ADD_USER'; payload: User }
  | { type: 'EDIT_USER'; payload: User }
  | { type: 'DELETE_USER'; payload: string }
  | { type: 'SET_FAMILIES'; payload: Family[] }
  | { type: 'ADD_FAMILY'; payload: Family }
  | { type: 'EDIT_FAMILY'; payload: Family }
  | { type: 'DELETE_FAMILY'; payload: string }
  | { type: 'SET_CURRENT_USER'; payload: User | null }
  | { type: 'SET_CURRENT_FAMILY'; payload: Family | null }
  | { type: 'LOAD_DATA'; payload: AppState };
